receipts_df = xl("B2:D14", headers=True)
payments_df = xl("F2:H7", headers=True)

receipts_df['Date'] = pd.to_datetime(receipts_df['Date'], format='%d/%m/%Y')
payments_df['Date'] = pd.to_datetime(payments_df['Date'], format='%d/%m/%Y')

remaining_payments = payments_df[['ID', 'Payment']].assign(Remaining=lambda df: df['Payment'])
results = []

for _, receipt in receipts_df.iterrows():
    receipt_cost, receipt_date = receipt['Cost'], receipt['Date']
    payment_durations, payment_contributions = [], []
    for idx, payment in remaining_payments.iterrows():
        if payment.Remaining > 0:
            payment_amount = min(payment.Remaining, receipt_cost)
            payment_durations.append((payments_df.at[idx, 'Date'] - receipt_date).days)
            payment_contributions.append(payment_amount)
            remaining_payments.at[idx, 'Remaining'] -= payment_amount
            receipt_cost -= payment_amount
            if receipt_cost == 0: break
    avg_duration = sum(d * a for d, a in zip(payment_durations, payment_contributions)) / sum(payment_contributions) if payment_contributions else 'NP'
    results.append({'Receipt ID': receipt['ID'], 'Duration': avg_duration})

results_df = pd.DataFrame(results)
results_df
